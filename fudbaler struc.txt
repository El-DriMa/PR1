/*
 Kreirati dinamički dvodimenzionalni niz čiji su elementi objekti tipa fudbaler 
 (fudbaler je struktura čija su obilježja data u nastavku). 
 Omogućiti korisniku da unese dimenzije niza.

struct fudbaler
{
    int* godRodjenja;
    int* brojIgraca;
    int* golovi;
};
Redovi dvodimenzionalnog niza predstavljaju različite timove,
a kolone predstavljaju igrače u tim timovima.

Omogućiti korisniku unos svih podataka za sve igrače, 
te napraviti (i testirati u main funkciji) funkciju koja će pronaći tim sa najvećim prosjekom. 
Zatim napraviti (i testirati u main funkciji) funkciju koja će pronaći igrača
sa najviše golova u timu sa najlošijim prosjekom golova. 
Radi lakšeg testiranja programa obavezno u funkciji unosa podataka omogućiti da se podaci generišu kao sljedeće:

godRodjenja: 1980 + rand() % ((2000 + 1) - 1980) // Generiše brojeve u rangu 1980 - 2000
brojIgraca: rand() % 30 + 1
golovi: rand() % 5

*/

#include<iostream>
#include<cstdlib>
using namespace std;
struct fudbaler
{
    int* godRodjenja;
    int* brojIgraca;
    int* golovi;

    fudbaler() {
        godRodjenja = new int;
        brojIgraca = new int;
        golovi = new int;
    }
    fudbaler(int gR, int brI, int g) {
        *godRodjenja = gR;
        *brojIgraca = brI;
        *golovi = g;


    }
    void unos() {
        
        cout << "Unesite godinu rodjenja : ",
            cin >> *godRodjenja;
        cout << "Unesite broj igraca : ",
            cin >> *brojIgraca;
        cout << "Unesite golove : ",
            cin >> *golovi;
    }
    void ispis() {
        cout << "Godina rodjenja : " << *godRodjenja << endl;
        cout << "Broj igraca : " << *brojIgraca << endl;
        cout << "Golovi : " << *golovi << endl;
    }

    ~fudbaler() {
        delete godRodjenja;
        delete brojIgraca;
        delete golovi;
    }
};
int timSaNajvecimProsjekom(fudbaler** f, int red, int kolona) {
    int max =INT_MIN, suma = 0, tim=0;
    for (int i = 0; i < red; i++)
    {
        for (int j = 0; j < kolona; j++)
        {
            suma += *(*(f + i) + j)->golovi;
        }
        suma = suma / kolona;
        if (suma > max) {
            max = suma;
            tim = i;
        }
    }
    return tim;
}
int timSaNajmanjimProsjekom(fudbaler** f, int red, int kolona) {
    int min = INT_MAX, suma = 0, tim = 0;
    for (int i = 0; i < red; i++)
    {
        for (int j = 0; j < kolona; j++)
        {
            suma += *(*(f + i) + j)->golovi;
        }
        suma = suma / kolona;
        if (suma < min) {
            min = suma;
            tim = i;
        }
    }
    return tim;
}
int igrac(fudbaler* f, int kolona) {
    int max = 0;
    for (int i = 0; i < kolona; i++)
    {
        if (*(f + i)->golovi > *(f + max)->golovi)
            max = i;
    }
    return max;
}

int main() {

    srand(time(NULL));

    int red, kolona;
    while (cout<<"Unesite broj redova : ", cin >> red, red < 0);
    while (cout<<"Unesite broj kolona : ", cin >> kolona, kolona < 0);

    fudbaler** f = new fudbaler*[red];
    for (int i = 0; i < red; i++)
    {
        *(f + i) = new fudbaler[kolona];
    }
    for (int i = 0; i < red; i++)
    {
        for (int j = 0; j < kolona; j++)
        {
            //(*(f + i) + j)->unos(); za rucni unos.
            *(*(f + i) + j)->godRodjenja = 1980 + rand() % ((2000 + 1) - 1980);
            *(*(f + i) + j)->brojIgraca = rand() % 30 + 1;
            *(*(f + i) + j)->golovi = rand() % 5;
        }
    }
    for (int i = 0; i < red; i++)
    {
        for (int j = 0; j < kolona; j++)
        {
            (*(f + i) + j)->ispis();
        }
    }
    cout << "Tim sa najvecim prosjekom je : Tim " << timSaNajvecimProsjekom(f, red, kolona) << endl;
    int najgori = timSaNajmanjimProsjekom(f, red, kolona);
    cout << "Igrac sa najvise golova u najlosijem timu je : Igrac " << igrac(f[najgori], kolona);

    for(int i=0;i<red;i++){
       delete[] *(f+i);
    }
    delete[] f;

    return 1;
}